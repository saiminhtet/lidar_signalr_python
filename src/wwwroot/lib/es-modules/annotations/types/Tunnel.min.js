"use strict";import H from"../../parts/Globals.js";import"../../parts/Utilities.js";var Annotation=H.Annotation,CrookedLine=Annotation.types.crookedLine,ControlPoint=Annotation.ControlPoint,MockPoint=Annotation.MockPoint;function getSecondCoordinate(t,o,n){return(o.y-t.y)/(o.x-t.x)*(n-t.x)+t.y}function Tunnel(){CrookedLine.apply(this,arguments)}H.extendAnnotation(Tunnel,CrookedLine,{getPointsOptions:function(){var t=CrookedLine.prototype.getPointsOptions.call(this);return t[2]=this.heightPointOptions(t[1]),t[3]=this.heightPointOptions(t[0]),t},getControlPointsOptions:function(){return this.getPointsOptions().slice(0,2)},heightPointOptions:function(t){var o=H.merge(t);return o.y+=this.options.typeOptions.height,o},addControlPoints:function(){CrookedLine.prototype.addControlPoints.call(this);var t=this.options,o=new ControlPoint(this.chart,this,H.merge(t.controlPointOptions,t.typeOptions.heightControlPoint),2);this.controlPoints.push(o),t.typeOptions.heightControlPoint=o.options},addShapes:function(){this.addLine(),this.addBackground()},addLine:function(){var t=this.initShape(H.merge(this.options.typeOptions.line,{type:"path",points:[this.points[0],this.points[1],function(t){var o=MockPoint.pointToOptions(t.annotation.points[2]);return o.command="M",o},this.points[3]]}),!1);this.options.typeOptions.line=t.options},addBackground:function(){var t=this.initShape(H.merge(this.options.typeOptions.background,{type:"path",points:this.points.slice()}));this.options.typeOptions.background=t.options},translateSide:function(t,o,n){var i=Number(n),s=0===i?3:2;this.translatePoint(t,o,i),this.translatePoint(t,o,s)},translateHeight:function(t){this.translatePoint(0,t,2),this.translatePoint(0,t,3),this.options.typeOptions.height=this.points[3].y-this.points[0].y}},{typeOptions:{xAxis:0,yAxis:0,background:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0},line:{strokeWidth:1},height:-2,heightControlPoint:{positioner:function(t){var o=MockPoint.pointToPixels(t.points[2]),n=MockPoint.pointToPixels(t.points[3]),i=(o.x+n.x)/2;return{x:i-this.graphic.width/2,y:getSecondCoordinate(o,n,i)-this.graphic.height/2}},events:{drag:function(t,o){o.chart.isInsidePlot(t.chartX-o.chart.plotLeft,t.chartY-o.chart.plotTop)&&(o.translateHeight(this.mouseMoveToTranslation(t).y),o.redraw(!1))}}}},controlPointOptions:{events:{drag:function(t,o){if(o.chart.isInsidePlot(t.chartX-o.chart.plotLeft,t.chartY-o.chart.plotTop)){var n=this.mouseMoveToTranslation(t);o.translateSide(n.x,n.y,this.index),o.redraw(!1)}}}}}),Annotation.types.tunnel=Tunnel;export default Tunnel;