"use strict";import H from"../../parts/Globals.js";import"../../parts/Utilities.js";var Annotation=H.Annotation,MockPoint=Annotation.MockPoint,ControlPoint=Annotation.ControlPoint;function CrookedLine(){Annotation.apply(this,arguments)}H.extendAnnotation(CrookedLine,null,{setClipAxes:function(){this.clipXAxis=this.chart.xAxis[this.options.typeOptions.xAxis],this.clipYAxis=this.chart.yAxis[this.options.typeOptions.yAxis]},getPointsOptions:function(){var t=this.options.typeOptions;return t.points.map(function(i){return i.xAxis=t.xAxis,i.yAxis=t.yAxis,i})},getControlPointsOptions:function(){return this.getPointsOptions()},addControlPoints:function(){this.getControlPointsOptions().forEach(function(t,i){var n=new ControlPoint(this.chart,this,H.merge(this.options.controlPointOptions,t.controlPoint),i);this.controlPoints.push(n),t.controlPoint=n.options},this)},addShapes:function(){var t=this.options.typeOptions,i=this.initShape(H.merge(t.line,{type:"path",points:this.points.map(function(t,i){return function(t){return t.annotation.points[i]}})}),!1);t.line=i.options}},{typeOptions:{xAxis:0,yAxis:0,line:{fill:"none"}},controlPointOptions:{positioner:function(t){var i=this.graphic,n=MockPoint.pointToPixels(t.points[this.index]);return{x:n.x-i.width/2,y:n.y-i.height/2}},events:{drag:function(t,i){if(i.chart.isInsidePlot(t.chartX-i.chart.plotLeft,t.chartY-i.chart.plotTop)){var n=this.mouseMoveToTranslation(t);i.translatePoint(n.x,n.y,this.index),i.options.typeOptions.points[this.index].x=i.points[this.index].x,i.options.typeOptions.points[this.index].y=i.points[this.index].y,i.redraw(!1)}}}}}),Annotation.types.crookedLine=CrookedLine;export default CrookedLine;