"use strict";import H from"../../parts/Globals.js";import"../../parts/Utilities.js";var Annotation=H.Annotation,MockPoint=Annotation.MockPoint,CrookedLine=Annotation.types.crookedLine;function InfinityLine(){CrookedLine.apply(this,arguments)}InfinityLine.findEdgeCoordinate=function(i,n,t,o){var e="x"===t?"y":"x";return(n[t]-i[t])*(o-i[e])/(n[e]-i[e])+i[t]},InfinityLine.findEdgePoint=function(i,n){var t,o,e,s=i.series.xAxis,r=n.series.yAxis,y=MockPoint.pointToPixels(i),a=MockPoint.pointToPixels(n),x=a.x-y.x,d=a.y-y.y,p=s.left,f=p+s.width,L=r.top,c=L+r.height,g=x<0?p:f,P=d<0?L:c,A={x:0===x?y.x:g,y:0===d?y.y:P};return 0!==x&&0!==d&&(o=InfinityLine.findEdgeCoordinate(y,a,"y",g),t=InfinityLine.findEdgeCoordinate(y,a,"x",P),o>=L&&o<=c?(A.x=g,A.y=o):(A.x=t,A.y=P)),A.x-=p,A.y-=L,i.series.chart.inverted&&(e=A.x,A.x=A.y,A.y=e),A};var edgePoint=function(i,n){return function(t){var o=t.annotation,e=o.points,s=o.options.typeOptions.type;return"horizontalLine"===s?e=[e[0],new MockPoint(o.chart,e[0].target,{x:e[0].x+1,y:e[0].y,xAxis:e[0].options.xAxis,yAxis:e[0].options.yAxis})]:"verticalLine"===s&&(e=[e[0],new MockPoint(o.chart,e[0].target,{x:e[0].x,y:e[0].y+1,xAxis:e[0].options.xAxis,yAxis:e[0].options.yAxis})]),InfinityLine.findEdgePoint(e[i],e[n])}};InfinityLine.endEdgePoint=edgePoint(0,1),InfinityLine.startEdgePoint=edgePoint(1,0),H.extendAnnotation(InfinityLine,CrookedLine,{addShapes:function(){var i=this.options.typeOptions,n=[this.points[0],InfinityLine.endEdgePoint];i.type.match(/Line/g)&&(n[0]=InfinityLine.startEdgePoint);var t=this.initShape(H.merge(i.line,{type:"path",points:n}),!1);i.line=t.options}}),Annotation.types.infinityLine=InfinityLine;export default InfinityLine;