"use strict";import H from"../parts/Globals.js";import draw from"../mixins/draw-point.js";import geometry from"../mixins/geometry.js";import geometryCircles from"../mixins/geometry-circles.js";import NelderMeadModule from"../mixins/nelder-mead.js";var nelderMead=NelderMeadModule.nelderMead;import U from"../parts/Utilities.js";var isArray=U.isArray,isNumber=U.isNumber,isObject=U.isObject,isString=U.isString;import"../parts/Series.js";var addEvent=H.addEvent,color=H.Color,extend=H.extend,getAreaOfCircle=geometryCircles.getAreaOfCircle,getAreaOfIntersectionBetweenCircles=geometryCircles.getAreaOfIntersectionBetweenCircles,getCirclesIntersectionPolygon=geometryCircles.getCirclesIntersectionPolygon,getCircleCircleIntersection=geometryCircles.getCircleCircleIntersection,getCenterOfPoints=geometry.getCenterOfPoints,getDistanceBetweenPoints=geometry.getDistanceBetweenPoints,getOverlapBetweenCirclesByDistance=geometryCircles.getOverlapBetweenCircles,isPointInsideAllCircles=geometryCircles.isPointInsideAllCircles,isPointInsideCircle=geometryCircles.isPointInsideCircle,isPointOutsideAllCircles=geometryCircles.isPointOutsideAllCircles,merge=H.merge,seriesType=H.seriesType,seriesTypes=H.seriesTypes,objectValues=function(e){return Object.keys(e).map(function(t){return e[t]})},getOverlapBetweenCircles=function(e){var t=0;if(2===e.length){var r=e[0],n=e[1];t=getOverlapBetweenCirclesByDistance(r.r,n.r,getDistanceBetweenPoints(r,n))}return t},loss=function(e,t){return t.reduce(function(t,r){var n=0;if(r.sets.length>1){var i=r.value-getOverlapBetweenCircles(r.sets.map(function(t){return e[t]}));n=Math.round(i*i*1e11)/1e11}return t+n},0)},bisect=function(e,t,r,n,i){var s,o,a=e(t),c=e(r),l=i||100,u=n||1e-10,d=r-t,f=1;if(t>=r)throw new Error("a must be smaller than b.");if(a*c>0)throw new Error("f(a) and f(b) must have opposite signs.");if(0===a)s=t;else if(0===c)s=r;else for(;f++<=l&&0!==o&&d>u;)a*(o=e(s=t+(d=(r-t)/2)))>0?t=s:r=s;return s},getDistanceBetweenCirclesByOverlap=function(e,t,r){var n=e+t;return r<=0?n:getAreaOfCircle(e<t?e:t)<=r?0:bisect(function(n){var i=getOverlapBetweenCirclesByDistance(e,t,n);return r-i},0,n)},isSet=function(e){return isArray(e.sets)&&1===e.sets.length},getMarginFromCircles=function(e,t,r){var n=t.reduce(function(t,r){var n=r.r-getDistanceBetweenPoints(e,r);return n<=t?n:t},Number.MAX_VALUE);return n=r.reduce(function(t,r){var n=getDistanceBetweenPoints(e,r)-r.r;return n<=t?n:t},n)},getLabelPosition=function(e,t){var r=e.reduce(function(r,n){var i=n.r/2;return[{x:n.x,y:n.y},{x:n.x+i,y:n.y},{x:n.x-i,y:n.y},{x:n.x,y:n.y+i},{x:n.x,y:n.y-i}].reduce(function(r,n){var i=getMarginFromCircles(n,e,t);return r.margin<i&&(r.point=n,r.margin=i),r},r)},{point:void 0,margin:-Number.MAX_VALUE}).point,n=nelderMead(function(r){return-getMarginFromCircles({x:r[0],y:r[1]},e,t)},[r.x,r.y]);return r={x:n[0],y:n[1]},isPointInsideAllCircles(r,e)&&isPointOutsideAllCircles(r,t)||(r=e.length>1?getCenterOfPoints(getCirclesIntersectionPolygon(e)):{x:e[0].x,y:e[0].y}),r},getLabelWidth=function(e,t,r){var n=t.reduce(function(e,t){return Math.min(t.r,e)},1/0),i=r.filter(function(t){return!isPointInsideCircle(e,t)}),s=function(r,n){return bisect(function(s){var o={x:e.x+n*s,y:e.y},a=isPointInsideAllCircles(o,t)&&isPointOutsideAllCircles(o,i);return-(r-s)+(a?0:Number.MAX_VALUE)},0,r)};return 2*Math.min(s(n,-1),s(n,1))},getLabelValues=function(e){var t=e.filter(isSet);return e.reduce(function(e,r){if(r.value){var n=r.sets,i=n.join(),s=t.reduce(function(e,t){return e[n.indexOf(t.sets[0])>-1?"internal":"external"].push(t.circle),e},{internal:[],external:[]}),o=getLabelPosition(s.internal,s.external),a=getLabelWidth(o,s.internal,s.external);e[i]={position:o,width:a}}return e},{})},addOverlapToSets=function(e){var t=e.filter(function(e){return 2===e.sets.length}).reduce(function(e,t){return t.sets.forEach(function(r,n,i){isObject(e[r])||(e[r]={overlapping:{},totalOverlap:0}),e[r].totalOverlap+=t.value,e[r].overlapping[i[1-n]]=t.value}),e},{});return e.filter(isSet).forEach(function(e){var r=t[e.sets[0]];extend(e,r)}),e},sortByTotalOverlap=function(e,t){return t.totalOverlap-e.totalOverlap},layoutGreedyVenn=function(e){var t=[],r={};e.filter(function(e){return 1===e.sets.length}).forEach(function(e){r[e.sets[0]]=e.circle={x:Number.MAX_VALUE,y:Number.MAX_VALUE,r:Math.sqrt(e.value/Math.PI)}});var n=function(e,r){var n=e.circle;n.x=r.x,n.y=r.y,t.push(e)};addOverlapToSets(e);var i=e.filter(isSet).sort(sortByTotalOverlap);n(i.shift(),{x:0,y:0});var s=e.filter(function(e){return 2===e.sets.length});return i.forEach(function(e){var i=e.circle,o=i.r,a=e.overlapping,c=t.reduce(function(e,n,c){var l=n.circle,u=a[n.sets[0]],d=getDistanceBetweenCirclesByOverlap(o,l.r,u),f=[{x:l.x+d,y:l.y},{x:l.x-d,y:l.y},{x:l.x,y:l.y+d},{x:l.x,y:l.y-d}];return t.slice(c+1).forEach(function(e){var t=e.circle,r=a[e.sets[0]],n=getDistanceBetweenCirclesByOverlap(o,t.r,r);f=f.concat(getCircleCircleIntersection({x:l.x,y:l.y,r:d},{x:t.x,y:t.y,r:n}))}),f.forEach(function(t){i.x=t.x,i.y=t.y;var n=loss(r,s);n<e.loss&&(e.loss=n,e.coordinates=t)}),e},{loss:Number.MAX_VALUE,coordinates:void 0});n(e,c.coordinates)}),r},layout=function(e){var t={};return e.length>0&&(t=layoutGreedyVenn(e),e.filter(function(e){return!isSet(e)}).forEach(function(e){var r=e.sets,n=r.join(),i=r.map(function(e){return t[e]});t[n]=getAreaOfIntersectionBetweenCircles(i)})),t},isValidRelation=function(e){var t={};return isObject(e)&&isNumber(e.value)&&e.value>-1&&isArray(e.sets)&&e.sets.length>0&&!e.sets.some(function(e){var r=!1;return!t[e]&&isString(e)?t[e]=!0:r=!0,r})},isValidSet=function(e){return isValidRelation(e)&&isSet(e)&&e.value>0},processVennData=function(e){var t=isArray(e)?e:[],r=t.reduce(function(e,t){return isValidSet(t)&&-1===e.indexOf(t.sets[0])&&e.push(t.sets[0]),e},[]).sort(),n=t.reduce(function(e,t){return isValidRelation(t)&&!t.sets.some(function(e){return-1===r.indexOf(e)})&&(e[t.sets.sort().join()]=t),e},{});return r.reduce(function(e,t,r,n){return n.slice(r+1).forEach(function(r){e.push(t+","+r)}),e},[]).forEach(function(e){if(!n[e]){var t={sets:e.split(","),value:0};n[e]=t}}),objectValues(n)},getScale=function(e,t,r){var n=r.bottom-r.top,i=r.right-r.left,s=i>0?1/i*e:1,o=n>0?1/n*t:1,a=(r.right+r.left)/2,c=(r.top+r.bottom)/2,l=Math.min(s,o);return{scale:l,centerX:e/2-a*l,centerY:t/2-c*l}},updateFieldBoundaries=function(e,t){var r=t.x-t.r,n=t.x+t.r,i=t.y+t.r,s=t.y-t.r;return(!isNumber(e.left)||e.left>r)&&(e.left=r),(!isNumber(e.right)||e.right<n)&&(e.right=n),(!isNumber(e.top)||e.top>s)&&(e.top=s),(!isNumber(e.bottom)||e.bottom<i)&&(e.bottom=i),e},vennOptions={borderColor:"#cccccc",borderDashStyle:"solid",borderWidth:1,brighten:0,clip:!1,colorByPoint:!0,dataLabels:{enabled:!0,verticalAlign:"middle",formatter:function(){return this.point.name}},inactiveOtherPoints:!0,marker:!1,opacity:.75,showInLegend:!1,states:{hover:{opacity:1,borderColor:"#333333"},select:{color:"#cccccc",borderColor:"#000000",animation:!1}},tooltip:{pointFormat:"{point.name}: {point.value}"}},vennSeries={isCartesian:!1,axisTypes:[],directTouch:!0,pointArrayMap:["value"],translate:function(){var e=this.chart;this.processedXData=this.xData,this.generatePoints();var t=processVennData(this.options.data),r=layout(t),n=getLabelValues(t),i=Object.keys(r).filter(function(e){var t=r[e];return t&&isNumber(t.r)}).reduce(function(e,t){return updateFieldBoundaries(e,r[t])},{top:0,bottom:0,left:0,right:0}),s=getScale(e.plotWidth,e.plotHeight,i),o=s.scale,a=s.centerX,c=s.centerY;this.points.forEach(function(e){var t,i=isArray(e.sets)?e.sets:[],s=i.join(),l=r[s],u=n[s]||{},d=u.width,f=u.position,p=e.options&&e.options.dataLabels;if(l){if(l.r)t={x:a+l.x*o,y:c+l.y*o,r:l.r*o};else if(l.d){t={d:l.d.reduce(function(e,t){return"M"===t[0]?(t[1]=a+t[1]*o,t[2]=c+t[2]*o):"A"===t[0]&&(t[1]=t[1]*o,t[2]=t[2]*o,t[6]=a+t[6]*o,t[7]=c+t[7]*o),e.concat(t)},[]).join(" ")}}f?(f.x=a+f.x*o,f.y=c+f.y*o):f={},isNumber(d)&&(d=Math.round(d*o))}e.shapeArgs=t,f&&t&&(e.plotX=f.x,e.plotY=f.y),d&&t&&(e.dlOptions=merge(!0,{style:{width:d}},isObject(p)&&p)),e.name=e.options.name||i.join("âˆ©")})},drawPoints:function(){var e=this,t=e.chart,r=e.group,n=e.points||[],i=t.renderer;n.forEach(function(n){var s={zIndex:isArray(n.sets)?n.sets.length:0},o=n.shapeArgs;t.styledMode||extend(s,e.pointAttribs(n,n.state)),n.draw({isNew:!n.graphic,animatableAttribs:o,attribs:s,group:r,renderer:i,shapeType:o&&o.d?"path":"circle"})})},pointAttribs:function(e,t){var r=this.options||{},n=e&&e.options||{},i=t&&r.states[t]||{},s=merge(r,{color:e&&e.color},n,i);return{fill:color(s.color).setOpacity(s.opacity).brighten(s.brightness).get(),stroke:s.borderColor,"stroke-width":s.borderWidth,dashstyle:s.borderDashStyle}},animate:function(e){if(!e){var t=H.animObject(this.options.animation);this.points.forEach(function(e){var r=e.shapeArgs;if(e.graphic&&r){var n={},i={};r.d?n.opacity=.001:(n.r=0,i.r=r.r),e.graphic.attr(n).animate(i,t),r.d&&setTimeout(function(){e&&e.graphic&&e.graphic.animate({opacity:1})},t.duration)}},this),this.animate=null}},utils:{addOverlapToSets:addOverlapToSets,geometry:geometry,geometryCircles:geometryCircles,getLabelWidth:getLabelWidth,getMarginFromCircles:getMarginFromCircles,getDistanceBetweenCirclesByOverlap:getDistanceBetweenCirclesByOverlap,layoutGreedyVenn:layoutGreedyVenn,loss:loss,nelderMead:NelderMeadModule,processVennData:processVennData,sortByTotalOverlap:sortByTotalOverlap}},vennPoint={draw:draw,shouldDraw:function(){return!!this.shapeArgs},isValid:function(){return isNumber(this.value)}};seriesType("venn","scatter",vennOptions,vennSeries,vennPoint),addEvent(seriesTypes.venn,"afterSetOptions",function(e){var t=e.options.states;this instanceof seriesTypes.venn&&Object.keys(t).forEach(function(e){t[e].halo=!1})});