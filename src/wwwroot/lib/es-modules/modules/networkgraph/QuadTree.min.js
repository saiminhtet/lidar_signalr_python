"use strict";import H from"../../parts/Globals.js";import U from"../../parts/Utilities.js";var extend=U.extend,QuadTreeNode=H.QuadTreeNode=function(t){this.box=t,this.boxSize=Math.min(t.width,t.height),this.nodes=[],this.isInternal=!1,this.body=!1,this.isEmpty=!0};extend(QuadTreeNode.prototype,{insert:function(t,i){var o;this.isInternal?this.nodes[this.getBoxPosition(t)].insert(t,i-1):(this.isEmpty=!1,this.body?i?(this.isInternal=!0,this.divideBox(),!0!==this.body&&(this.nodes[this.getBoxPosition(this.body)].insert(this.body,i-1),this.body=!0),this.nodes[this.getBoxPosition(t)].insert(t,i-1)):((o=new QuadTreeNode({top:t.plotX,left:t.plotY,width:.1,height:.1})).body=t,o.isInternal=!1,this.nodes.push(o)):(this.isInternal=!1,this.body=t))},updateMassAndCenter:function(){var t=0,i=0,o=0;this.isInternal?(this.nodes.forEach(function(s){s.isEmpty||(t+=s.mass,i+=s.plotX*s.mass,o+=s.plotY*s.mass)}),i/=t,o/=t):this.body&&(t=this.body.mass,i=this.body.plotX,o=this.body.plotY),this.mass=t,this.plotX=i,this.plotY=o},divideBox:function(){var t=this.box.width/2,i=this.box.height/2;this.nodes[0]=new QuadTreeNode({left:this.box.left,top:this.box.top,width:t,height:i}),this.nodes[1]=new QuadTreeNode({left:this.box.left+t,top:this.box.top,width:t,height:i}),this.nodes[2]=new QuadTreeNode({left:this.box.left+t,top:this.box.top+i,width:t,height:i}),this.nodes[3]=new QuadTreeNode({left:this.box.left,top:this.box.top+i,width:t,height:i})},getBoxPosition:function(t){var i=t.plotX<this.box.left+this.box.width/2,o=t.plotY<this.box.top+this.box.height/2;return i?o?0:3:o?1:2}});var QuadTree=H.QuadTree=function(t,i,o,s){this.box={left:t,top:i,width:o,height:s},this.maxDepth=25,this.root=new QuadTreeNode(this.box,"0"),this.root.isInternal=!0,this.root.isRoot=!0,this.root.divideBox()};extend(QuadTree.prototype,{insertNodes:function(t){t.forEach(function(t){this.root.insert(t,this.maxDepth)},this)},visitNodeRecursive:function(t,i,o){var s;t||(t=this.root),t===this.root&&i&&(s=i(t)),!1!==s&&(t.nodes.forEach(function(t){if(t.isInternal){if(i&&(s=i(t)),!1===s)return;this.visitNodeRecursive(t,i,o)}else t.body&&i&&i(t.body);o&&o(t)},this),t===this.root&&o&&o(t))},calculateMassAndCenter:function(){this.visitNodeRecursive(null,null,function(t){t.updateMassAndCenter()})}});