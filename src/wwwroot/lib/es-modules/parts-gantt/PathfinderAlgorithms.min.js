"use strict";import U from"../parts/Utilities.js";var extend=U.extend,pick=U.pick,min=Math.min,max=Math.max,abs=Math.abs;function findLastObstacleBefore(n,t,a){for(var x,i,e=a||0,s=n.length-1,r=t-1e-7;e<=s;)if((i=r-n[x=s+e>>1].xMin)>0)e=x+1;else{if(!(i<0))return x;s=x-1}return e>0?e-1:0}function pointWithinObstacle(n,t){return t.x<=n.xMax&&t.x>=n.xMin&&t.y<=n.yMax&&t.y>=n.yMin}function findObstacleFromPoint(n,t){for(var a=findLastObstacleBefore(n,t.x+1)+1;a--;)if(n[a].xMax>=t.x&&pointWithinObstacle(n[a],t))return a;return-1}function pathFromSegments(n){var t=[];if(n.length){t.push("M",n[0].start.x,n[0].start.y);for(var a=0;a<n.length;++a)t.push("L",n[a].end.x,n[a].end.y)}return t}function limitObstacleToBounds(n,t){n.yMin=max(n.yMin,t.yMin),n.yMax=min(n.yMax,t.yMax),n.xMin=max(n.xMin,t.xMin),n.xMax=min(n.xMax,t.xMax)}var algorithms={straight:function(n,t){return{path:["M",n.x,n.y,"L",t.x,t.y],obstacles:[{start:n,end:t}]}},simpleConnect:extend(function(n,t,a){var x,i,e,s,r,y,o,M=[],c=pick(a.startDirectionX,abs(t.x-n.x)>abs(t.y-n.y))?"x":"y",u=a.chartObstacles,d=findObstacleFromPoint(u,n),l=findObstacleFromPoint(u,t);function f(n,t,a,x,i){var e={x:n.x,y:n.y};return e[t]=a[x||t]+(i||0),e}function m(n,t,a){var x=abs(t[a]-n[a+"Min"])>abs(t[a]-n[a+"Max"]);return f(t,a,n,a+(x?"Max":"Min"),x?1:-1)}return l>-1?(x={start:s=m(u[l],t,c),end:t},o=s):o=t,d>-1&&(s=m(i=u[d],n,c),M.push({start:n,end:s}),s[c]>=n[c]==s[c]>=o[c]&&(y=n[c="y"===c?"x":"y"]<t[c],M.push({start:s,end:f(s,c,i,c+(y?"Max":"Min"),y?1:-1)}),c="y"===c?"x":"y")),s=f(e=M.length?M[M.length-1].end:n,c,o),M.push({start:e,end:s}),r=f(s,c="y"===c?"x":"y",o),M.push({start:s,end:r}),M.push(x),{path:pathFromSegments(M),obstacles:M}},{requiresObstacles:!0}),fastAvoid:extend(function(n,t,a){var x,i,e,s=pick(a.startDirectionX,abs(t.x-n.x)>abs(t.y-n.y)),r=s?"x":"y",y=[],o=!1,M=a.obstacleMetrics,c=min(n.x,t.x)-M.maxWidth-10,u=max(n.x,t.x)+M.maxWidth+10,d=min(n.y,t.y)-M.maxHeight-10,l=max(n.y,t.y)+M.maxHeight+10,f=a.chartObstacles,m=findLastObstacleBefore(f,c),h=findLastObstacleBefore(f,u);function b(n,t,a){var x,i,e,s,r,y=n.x<t.x?1:-1;for(n.x<t.x?(x=n,i=t):(x=t,i=n),n.y<t.y?(s=n,e=t):(s=t,e=n),r=y<0?min(findLastObstacleBefore(f,i.x),f.length-1):0;f[r]&&(y>0&&f[r].xMin<=i.x||y<0&&f[r].xMax>=x.x);){if(f[r].xMin<=i.x&&f[r].xMax>=x.x&&f[r].yMin<=e.y&&f[r].yMax>=s.y)return a?{y:n.y,x:n.x<t.x?f[r].xMin-1:f[r].xMax+1,obstacle:f[r]}:{x:n.x,y:n.y<t.y?f[r].yMin-1:f[r].yMax+1,obstacle:f[r]};r+=y}return t}function p(n,t,a,x,i){var e,s,r=i.soft,y=i.hard,o=x?"x":"y",M={x:t.x,y:t.y},c={x:t.x,y:t.y},u=n[o+"Max"]>=r[o+"Max"],d=n[o+"Min"]<=r[o+"Min"],l=n[o+"Max"]>=y[o+"Max"],f=n[o+"Min"]<=y[o+"Min"],m=abs(n[o+"Min"]-t[o]),h=abs(n[o+"Max"]-t[o]),p=abs(m-h)<10?t[o]<a[o]:h<m;return c[o]=n[o+"Min"],M[o]=n[o+"Max"],e=b(t,c,x)[o]!==c[o],s=b(t,M,x)[o]!==M[o],p=e?!s||p:!s&&p,p=d?!u||p:!u&&p,p=f?!l||p:!l&&p}for((h=findObstacleFromPoint(f=f.slice(m,h+1),t))>-1&&(e=function(n,t,x){var i=min(n.xMax-t.x,t.x-n.xMin)<min(n.yMax-t.y,t.y-n.yMin),e=p(n,t,x,i,{soft:a.hardBounds,hard:a.hardBounds});return i?{y:t.y,x:n[e?"xMax":"xMin"]+(e?1:-1)}:{x:t.x,y:n[e?"yMax":"yMin"]+(e?1:-1)}}(f[h],t,n),y.push({end:t,start:e}),t=e);(h=findObstacleFromPoint(f,t))>-1;)i=t[r]-n[r]<0,(e={x:t.x,y:t.y})[r]=f[h][i?r+"Max":r+"Min"]+(i?1:-1),y.push({end:t,start:e}),t=e;return{path:pathFromSegments(x=(x=function n(t,x,i){if(t.x===x.x&&t.y===x.y)return[];var e,s,r,y,M,m,h,O=i?"x":"y",g=a.obstacleOptions.margin,v={soft:{xMin:c,xMax:u,yMin:d,yMax:l},hard:a.hardBounds};return(M=findObstacleFromPoint(f,t))>-1?(y=p(M=f[M],t,x,i,v),limitObstacleToBounds(M,a.hardBounds),h=i?{y:t.y,x:M[y?"xMax":"xMin"]+(y?1:-1)}:{x:t.x,y:M[y?"yMax":"yMin"]+(y?1:-1)},(m=findObstacleFromPoint(f,h))>-1&&(limitObstacleToBounds(m=f[m],a.hardBounds),h[O]=y?max(M[O+"Max"]-g+1,(m[O+"Min"]+M[O+"Max"])/2):min(M[O+"Min"]+g-1,(m[O+"Max"]+M[O+"Min"])/2),t.x===h.x&&t.y===h.y?(o&&(h[O]=y?max(M[O+"Max"],m[O+"Max"])+1:min(M[O+"Min"],m[O+"Min"])-1),o=!o):o=!1),s=[{start:t,end:h}]):(s=[{start:t,end:{x:(e=b(t,{x:i?x.x:t.x,y:i?t.y:x.y},i)).x,y:e.y}}],e[i?"x":"y"]!==x[i?"x":"y"]&&(y=p(e.obstacle,e,x,!i,v),limitObstacleToBounds(e.obstacle,a.hardBounds),r={x:i?e.x:e.obstacle[y?"xMax":"xMin"]+(y?1:-1),y:i?e.obstacle[y?"yMax":"yMin"]+(y?1:-1):e.y},i=!i,s=s.concat(n({x:e.x,y:e.y},r,i)))),s=s.concat(n(s[s.length-1].end,x,!i))}(n,t,s)).concat(y.reverse())),obstacles:x}},{requiresObstacles:!0})};export default algorithms;