import geometry from"./geometry.js";var getAngleBetweenPoints=geometry.getAngleBetweenPoints,getCenterOfPoints=geometry.getCenterOfPoints,getDistanceBetweenPoints=geometry.getDistanceBetweenPoints;function round(e,t){var n=Math.pow(10,t);return Math.round(e*n)/n}function getAreaOfCircle(e){if(e<=0)throw new Error("radius of circle must be a positive number.");return Math.PI*e*e}function getCircularSegmentArea(e,t){return e*e*Math.acos(1-t/e)-(e-t)*Math.sqrt(t*(2*e-t))}function getOverlapBetweenCircles(e,t,n){var r=0;if(n<e+t){if(n<=Math.abs(t-e))r=getAreaOfCircle(e<t?e:t);else{var i=(e*e-t*t+n*n)/(2*n),s=n-i;r=getCircularSegmentArea(e,e-i)+getCircularSegmentArea(t,t-s)}r=round(r,14)}return r}function getCircleCircleIntersection(e,t){var n=getDistanceBetweenPoints(e,t),r=e.r,i=t.r,s=[];if(n<r+i&&n>Math.abs(r-i)){var o=r*r,c=(o-i*i+n*n)/(2*n),l=Math.sqrt(o-c*c),u=e.x,a=t.x,g=e.y,C=t.y,f=u+c*(a-u)/n,P=g+c*(C-g)/n,d=l/n*-(C-g),A=l/n*-(a-u);s=[{x:round(f+d,14),y:round(P-A,14)},{x:round(f-d,14),y:round(P+A,14)}]}return s}function getCirclesIntersectionPoints(e){return e.reduce(function(e,t,n,r){var i=r.slice(n+1).reduce(function(e,r,i){var s=[n,i+n+1];return e.concat(getCircleCircleIntersection(t,r).map(function(e){return e.indexes=s,e}))},[]);return e.concat(i)},[])}function isPointInsideCircle(e,t){return getDistanceBetweenPoints(e,t)<=t.r+1e-10}function isPointInsideAllCircles(e,t){return!t.some(function(t){return!isPointInsideCircle(e,t)})}function isPointOutsideAllCircles(e,t){return!t.some(function(t){return isPointInsideCircle(e,t)})}function getCirclesIntersectionPolygon(e){return getCirclesIntersectionPoints(e).filter(function(t){return isPointInsideAllCircles(t,e)})}function getAreaOfIntersectionBetweenCircles(e){var t,n=getCirclesIntersectionPolygon(e);if(n.length>1){var r=getCenterOfPoints(n),i=(n=n.map(function(e){return e.angle=getAngleBetweenPoints(r,e),e}).sort(function(e,t){return t.angle-e.angle}))[n.length-1],s=n.reduce(function(t,n){var r=t.startPoint,i=getCenterOfPoints([r,n]),s=n.indexes.filter(function(e){return r.indexes.indexOf(e)>-1}).reduce(function(t,s){var o=e[s],c=getAngleBetweenPoints(o,n),l=getAngleBetweenPoints(o,r),u=l-(l-c+(l<c?2*Math.PI:0))/2,a=getDistanceBetweenPoints(i,{x:o.x+o.r*Math.sin(u),y:o.y+o.r*Math.cos(u)}),g=o.r;return a>2*g&&(a=2*g),(!t||t.width>a)&&(t={r:g,largeArc:a>g?1:0,width:a,x:n.x,y:n.y}),t},null);if(s){var o=s.r;t.arcs.push(["A",o,o,0,s.largeArc,1,s.x,s.y]),t.startPoint=n}return t},{startPoint:i,arcs:[]}).arcs;0===s.length||1===s.length||(s.unshift(["M",i.x,i.y]),t={center:r,d:s})}return t}var geometryCircles={getAreaOfCircle:getAreaOfCircle,getAreaOfIntersectionBetweenCircles:getAreaOfIntersectionBetweenCircles,getCircleCircleIntersection:getCircleCircleIntersection,getCirclesIntersectionPoints:getCirclesIntersectionPoints,getCirclesIntersectionPolygon:getCirclesIntersectionPolygon,getCircularSegmentArea:getCircularSegmentArea,getOverlapBetweenCircles:getOverlapBetweenCircles,isPointInsideCircle:isPointInsideCircle,isPointInsideAllCircles:isPointInsideAllCircles,isPointOutsideAllCircles:isPointOutsideAllCircles,round:round};export default geometryCircles;